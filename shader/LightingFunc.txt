//declarations
struct Light
{
	vec4 Color;
	vec3 Position;
	float Intensity;
	vec3 Direction;
	float Length;
	vec3 Padd;
	float Range;
};

#define PI 3.141592653589793
#define saturate(x) clamp(x,0.0f,1.0f)
#define sqr(x) x * x
//Functions
float OrenNayarDiffuse(in vec3 normal,in vec3 lightDir, in vec3 toeye,in float roughness){
	float ndotl = dot(normal , lightDir);
	float ndotv = dot(normal , toeye);

	float angleVN = acos(ndotv);
	float angleLN = acos(ndotl);

	float alpha = max(angleVN, angleLN);
	float beta = min(angleVN, angleLN);
	float gamma = dot(toeye - normal * ndotv, lightDir - normal * ndotl);

	float rSqr = roughness * roughness;

	float A = 1.0 - 0.5 * (rSqr / (rSqr + 0.57));
	float B = 0.45 * (rSqr / (rSqr + 0.09));

	float C = sin(alpha) * tan(beta);

	return max(0.0, ndotl) * (A + B * max(0.0 , gamma) * C);
}

float F_Schlick(float f0, float hdotl){
	return f0 + (1.0 - f0) * pow(1.0f - hdotl, 5.0f);
}

float IORToF0(float n){
	return pow(n - 1, 2) / pow(n + 1, 2);
}
/*
float DisneyDiffuse(float ndotv, float ndotl, float ldoth,float roughness){
	float energybias = mix(0.0, 0.5, roughness);
	float energyFactor = mix(1.0, 1.0 / 1.51, roughness);
	float fd90 = energybias + 2.0 * ldoth*ldoth * roughness;
	vec3 f0 = vec3(1.0f);
	float lightScatter = F_Schlick(f0,fd90,ndotl);
	float viewScatter = F_Schlick(f0,fd90,ndotv);
	return lightScatter * viewScatter * energyFactor;
}
*/
vec3 FresnelSchlick(in float HdotL, in vec3 spec)
{
	return spec + (vec3(1.0f) - spec) * pow(1.0 - HdotL,5);
}

float GeometricAtt(in vec3 normal,in vec3 lightDir, in vec3 toeye, in vec3 halfwayVec)
{
	float hdotn = dot(halfwayVec,normal);
	float edotn = dot(toeye, normal);
	float edoth = dot(toeye, halfwayVec);
	float ndotl = dot(lightDir, normal);

	float a = 2 * hdotn * edotn / edoth;
	float b = 2 * hdotn * ndotl / edoth;
	float c = min(a,b);
	return min(1,c);
}

float BeckmannDistribution(in float ndoth,in float roughness)
{
	/*
	ndoth = max(0.0001, ndoth);
	float cos2Alpha = ndoth * ndoth;
	float tan2Alpha = (cos2Alpha - 1) / cos2Alpha;
	float rSqr = roughness * roughness;
	float denom = PI * rSqr * cos2Alpha * cos2Alpha;
	return exp(tan2Alpha / rSqr) / denom;
	*/
	float r1 = 1.0 / (4.0 * sqr(roughness) * pow(ndoth, 4.0));
	float r2 = (sqr(ndoth) - 1.0) / (sqr(roughness) * sqr(ndoth));
	return r1 * exp(r2);

}
float GGX(float ndoth, float  roughness) //ty Tim
{
	/*
	float cosSquared = ndoth * ndoth;
	float tanSquared = (1 - cosSquared) / cosSquared;
	return (1.0 / PI) * sqr(roughness / cosSquared * ( sqr(roughness + tanSquared)));
	*/
	float den = sqr(ndoth) * sqr(roughness) + (1 - sqr(ndoth));
	float v = ndoth > 0 ? 1 : 0;
	return (v * sqr(roughness)) / ( PI * den * den);
}

float D_GGX(float ndoth, float roughness) //ty frostbite
{
	float rSqr = sqr(roughness);
	float f = (ndoth * rSqr - ndoth) * ndoth + 1;
	return rSqr / (f * f);
}

float V_SmithGGXCorrelated(float ndotl, float ndotv, float roughness)//ty Frostbite
{
	float rSqr = sqr(roughness);

	float lambda_GGXV = ndotl * sqrt((-ndotv * rSqr + ndotv) * ndotv + rSqr);
	float lambda_GGXL = ndotv * sqrt((-ndotv * rSqr + ndotv) * ndotv + rSqr);
	return 0.5f / (lambda_GGXV + lambda_GGXL);
}

vec3 CookTorranceSpecular(vec3 normal, vec3 lightDir, vec3 toeye, float roughness, float metal)
{
	vec3 halfWayVector = normalize(toeye + lightDir);
	float hdotl = dot(halfWayVector, lightDir);
	float ndotl = dot(normal, lightDir);
	float ndoth = dot(halfWayVector, normal);
	float ndotv = dot(toeye, normal);

	float ior = mix(1.46, 2.95, metal); //ior for plastic and iron, metallic values should actually be fetched from a texture and be in rgb space but this will do for now
	float f0 = IORToF0(ior);

	vec3 F = vec3(F_Schlick(f0, hdotl));
	vec3 D = vec3(GGX(ndoth, roughness));
	//float G = V_SmithGGXCorrelated(ndotl,ndotv,roughness);
	vec3 G = vec3(GeometricAtt(normal, lightDir,toeye, halfWayVector));

	return (F * D * G) / (4 * ndotl * ndotv);
}

vec4 CalcDLight(Light light, vec3 inNormal, vec3 posw, vec3 campos, vec3 baseColor, float roughness, float metal )
{
	vec4 lightColor = vec4(0,0,0,1);
	vec3 lightDir = normalize(light.Direction);

	vec3 toeye = normalize(campos - posw);
	vec3 diff = vec3(OrenNayarDiffuse(inNormal, -lightDir,toeye, roughness)) * baseColor;
	vec3 spec = CookTorranceSpecular(inNormal, -lightDir, toeye, roughness, metal);

	//ibl
	vec3 reflected = reflect(g_CamDir, inNormal);

	ivec2 texDim = textureSize(g_SkyCubeTex,0);
	float numMips = ceil(log2(float(max(texDim.x,texDim.y)))) - 1.0f;
	float mipLevel = numMips * roughness;
	vec4 iblSpec = textureLod(g_SkyCubeTex,reflected, mipLevel);
	iblSpec = pow(iblSpec, vec4(2.2));

	vec4 iblDiff = texture(g_IrradianceCubeTex,inNormal);
	iblDiff = pow(iblDiff, vec4(2.2));
	//diff = diff * iblDiff.xyz;
	//spec = spec * iblSpec.xyz;
	//metallic
	diff = mix(diff, vec3(0.0), metal);
	spec = mix(spec, spec * baseColor, metal);

	vec3 iblColor = mix(iblSpec.xyz , iblDiff.xyz, roughness);
	lightColor.xyz = vec3(light.Color.xyz) * (diff  + spec);
	return lightColor;
}